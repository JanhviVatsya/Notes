Fixed Size Window

        int i=0, j=0;
        while(j < nums.size()){
            //calculation
            if(j-i+1 < k){
                j++;
            }
            else if(j-i+1 == k){
                //ans -> calculation

                //calculation to remove i window size
                //maintains and slide
            }
        }

___________________________________________________________________

Example and better way to write the same algo (fixed size)
Leetcode Question: 
Maximum Average Subarray I
Solution:
double findMaxAverage(vector<int>& nums, int k) {
        int i=0;
        double maxavg=INT_MIN, sum=0;
        for(i=0; i<k; i++) sum+=nums[i];
        maxavg=sum/k;
        for(int j=i; j<nums.size(); j++){
            sum+=nums[j];
            sum-=nums[j-i];
            maxavg=max(maxavg,sum/k);
        }
        return maxavg;
    }
____________________________________________________________________

Variable Size Window

        int i=0, j=0;
        while(j < nums.size()){
            //calculation
            if( condition < k){
                j++;
            }
            else if(condition == k){
                //ans -> calculation
                j++;
            }
            else if(condition > k){
                while(condition > k){
                    //remove calculation for i
                    j++;
                }
            }
        }
_____________________________________________________________________________

Example and better way to write the same algo (variable size)
Leetcode Question:
Subarray Product Less Than K
Solution:
int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        int count=0, pro=1;
        int i=0, j=0;
        while(j<nums.size()){
            pro*=nums[j];
            while(i<=j && pro>=k){
                pro=pro/nums[i];
                i++;
            }
            count+=j-i+1;
            j++;
        }
        return count;
    }
